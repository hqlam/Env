
# Source global definitions
if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi

export PS1="\u@\h:\w\\$ "
export PATH=$PATH:.

### HELPERS

line () {      n=$1; n=${n:-80}; echo `seq  -f = -s '' $n ` ; }
ech2 () {      echo;echo $* ; }
alias h='      hostname | egrep  -C1 [a-z]+'
alias hn='     h; ifconfig | gip '

# Grep on history of cmd lines
alias ht='     history | tail -20 '
alias hist='   HISTTIMEFORMAT=%c'
fgh  ()  {     HISTTIMEFORMAT=%c ; history | egrep $*  ; }

fkp  () {      r=`ps -ef | grep $1 | grep -v grep |awk '{print $2}' ` ; if [ ! -z "$r" ]; then sudo kill  $r; fi ; }

fgbC ()   {    grep -i "$1" $2 $3 $4  ~/checkouts/hl/Env/bashrc_CSV ;}
fgbZ ()   {    grep -i "$1" $2 $3 $4  ~/checkouts/hl/Env/bashrc_ZBRA ;}
fgbH ()   {    grep -i "$1" $2 $3 $4  ~/checkouts/hl/Env/bashrc_H    ;}
alias vicC='   view   ~/checkouts/hl/Env/bashrc_CSV'
alias vicZ='   view   ~/checkouts/hl/Env/bashrc_ZBRA'
alias vicH='   view   ~/checkouts/hl/Env/bashrc_H   '
# Grep on file .Bashrc
fgb  ()  {     egrep -i "$1" $2 $3 $4  $HOME/.bashrc ; }

alias vic='    vi        $HOME/.bashrc'
alias soc='    h; source $HOME/.bashrc'
alias soc0='   unalias -a && source $HOME/.bashrc '
alias vicore=' vi        $HOME/Help/bash_rcFiles/.core_bashrc'

# scp bashrc to core hosts
c2h () {       h=$1; scp ~/Help/bash_rcFiles/.core_bashrc  clduser@$h:~/ ; }
h2c () {       h=$1; scp clduser@$h:~/.bashrc             ~/Help/bash_rcFiles/.core_bashrc ; }
C2hk () {      for i in $lhkR $lhkA $lhkY; do ech2 $h; c2h $i ; done ; } 

alias grep='   grep    --color=auto'
alias egrep='  egrep   --color=auto'
#alias vifilerc='sudo vi /usr/share/vim/vimrc'

vibc () {      filename=$1; old="$2"; new=$3; vi -bc ":%s/$old/$new/c|:q" $filename ; }
vid  () {      filename=$1; pat="$2";         vi -bc ":g/$pat/d|:q"       $filename ; }

vin  () {      filename=$1; num=$2;           vi      +$num               $filename ; }
vis  () {      filename=$1; pat=$2;           vi      +/$pat              $filename ; }

vics () {      vis $HOME/.bashrc $* ; }
vih  () {      cmd=$*; bash $HOME/proj/shell/hterm.sh basic  vis $cmd ; }

# Timing
alias t1='     starttime=$(date +"%s")'
alias t2='     date; echo seconds=$(($(date +"%s")-$starttime)) | egrep "=[0-9]+" '
alias dateT='  date    "+%FT%T"'
alias dateU='  date -u "+%FT%T"'
datems () {    node -e 'console.log(new Date().getTime())' ; }
alias now='    echo UTC: `dateU`|cat09; echo Now: `dateT`|cat09 '

##  Print Json
alias pjson='  python -m json.tool'

### ALIASES_AND_FUNCTIONS

# tcl expect
sup () {       s=$1; u=$2; p=$3; ~/proj/tclex/ssh.exp $s $u $p ; }
siup () {      echo IP + User + Pwd;  expect -c "set timeout 20; set user [lindex $argv 1]; set password [lindex $argv 2]; puts \"hello [lindex $argv 1] \"  " ; }

# scp rsync cmds
#96.118.54.192 $ scp  -i /opt/xpc-openstack-key.pem.cer /tmp/cpe_devices_summary$day.csv clduser@96.118.59.197:/tmp/
#96.118.54.192 $ ssh  -i /opt/xpc-openstack-key.pem.cer  root@96.118.59.197 "rm -rf /tmp/cpe_devices_summary$day.csv"
rsy () {       mid=$3; mid=${mid:-10.1.2.3}; tarhost=$1; f=$2; rsync -av -e "ssh $mid ssh" $tarhost:~/$f  ~/ ; }
rsy2sdev () {  f=$1; p=$2; rsync -v $f  172.20.3.178:~/$p   ; }
scpfsdev () {  pf=$*;      scp   -r hlam001c@172.20.3.178:~/$pf   . ; }

# web share a local folder
ipad () {      python -c 'import socket; print (socket.gethostbyname(socket.gethostname())); ' ; }
webshare () {  p=$1; p=${p:-5777}; ech2 `ipad`:$p; python -m SimpleHTTPServer $p ; }
alias pyshare='echo Will share at localhost port 8888; python -m SimpleHTTPServer 8888 & '

alias ipdrop=' python $HOME/proj/py/iDropped.py |cat09'
ipdr () {      python -c 'import socket; print ("IP=", socket.gethostbyname(socket.gethostname()) , "If IP==127.0.0.1, Then Internet connection was dropped."  ) ' ; }

# cd cmds
alias cdthum=' cd /Volumes && ls -ltr '
alias cdapps=' cd /Applications/'

alias cddesk=' cd $HOME/Desktop/'
alias cddocs=' cd $HOME/Documents/'
alias cddown=' cd $HOME/Downloads/'
alias cddrop=' cd $HOME/Dropbox/; ls -ltra'
alias cdbox='  cd $HOME/box_sync; ls -ltra'
alias cdhelp=' cd $HOME/Help/'
alias cdbash=' cd $HOME/Help/bash_rcFiles'
alias cdlogs=' cd $HOME/logs/; ls -ltra'
alias cdpy='   cd $HOME/proj/py'
alias cdsh='   cd $HOME/proj/shell'

alias cddoca=' cd ~/Documents/si/api_docs'
alias cdbx='   cdco; cd boxer '

alias cdco='   cd $HOME/checkouts;h'
alias cdhl='   cd $HOME/checkouts/hl; llr '
alias cdenv='  cd $HOME/checkouts/hl/Env; llr '
alias cdsplu=' cd $HOME/checkouts/hl/splunk/ '
alias cdsi='   cd $HOME/checkouts/hl/si; llt '
alias cddevop='cd $HOME/checkouts/hl/si/devops'

### TIG_COMMANDS
#   brew install tig; tig --help; tig //current branch;
#   tig  grep hlam; --all //allbranches; develop //a specific branch; ; test..develop //diff between; 
#   tig  refs             //all references like branches, remotes and tags
#   git  show |tig ; git log | tig;
#   tig  blame file ; tig master ; tig test..master; tig myFile; tig v0.0.3:README
alias t1w='       tig --all  --since=1.week -- '

### GIT_COMMANDS

gith () {         git help $* ; }

# Save fragments: git stash; then later:  git stash pop; list; drop
gitsc () {        commit=$1; git show                            $commit ; }

alias d_h='       co_d && echo ****Develop: `git show develop|grep Date:` ; co_h && echo ****henry  : `git show henry  |grep Date:` '

alias d_m='       co_d && echo ****Develop: `git show develop|grep Date:` ; co_m && echo ****Master : `git show master |grep Date:` '
alias m_d='       co_m && echo ****Master : `git show master |grep Date:` ; co_d && echo ****Develop: `git show develop|grep Date:` '

# git log --no-merges -p 1.12.0..v1.13.0 |egrep -A4 "^commit" # git log --since="2 days ago"
gitlastcommit () { git pull; commit=$1; commit=${commit:-1}; git log -p -$commit ; }
gitlastcom () {    git pull 2> /dev/null; commit=$1; commit=${commit:-1}; git log -p -$commit | egrep "commit [0-9a-f]{7}" |cut -c8-14 ; }

# recent commits
git1line () {                                     git log --oneline --graph ; }
gitoneline () {                                   git log --pretty=oneline ; }

# grep text from git_log
gitgl () {                                        git log |egrep -i -C10 $* ; }

# Review history: show history of a file
gitfilehist () {  f=$1 ;                          git log -p -- $f ; }
alias gitfilehist2='                              git log -p --since="7 days ago" '
alias gitll='     echo "*LATEST LOG ... :";       git log |head -7;  echo '
gitdirhist () {   for f in `ls`; do echo  `gitfilehist $f|head -5|grep Date` $f ; done ; }
gitdirsort ()   { gitdirhist > ~/fh; cat ~/fh | sort ; rm -f ~/fh ; }
#gitdirsort ()  { for f in `ls`; do echo  `gitfilehist $f|head -5|grep Date|cut: -f2` $f ; done > ~/fh; cat ~/fh|sort ; }

# file history with tig command
catt () {         f=$1;  tig blame $f ; }

# Diff the commit to its parents: git diff efe1243^! ; OR git diff --staged;
gitdif () {       f=$1 ; git diff  $f ; }
alias gitdiff='   git diff HEAD HEAD^1 ; git diff HEAD HEAD^1 --stat'
alias gitmod='    git diff `git status|grep modified:|cut: -f2` '
gitdirty () {     topic=$1;                             echo $topic; upstr=$2; git diff --name-status $topic $upstr ; }
gitdirty1 () {    topic=`git branch|grep "*"|cuts -f2`; echo $topic; upstr=$1; git diff --name-status $topic $upstr ; }

# status, branch, last log, last commit
alias gits='      echo "    ****STATUS:";     git status; echo '
alias gitb='      echo -ne "****BRANCH: \t "; git branch; echo '
alias gitst='     echo "    ****BRANCH ...:"; git status; echo; git branch -vv; ech2 "****THE LATEST LOG ... :"; git log |head -7;  echo '

alias cbr='                                   git branch | grep "*" | cuts -f2'

alias gitallb='   echo "All branches: ";      git pull;          git branch -av; pwd'

# git pull all
alias gitp='      t1;  git pull;  t2 '
fgitp () {        soc; for d in `ls ..`; do echo -n "**** $d : "; cd ../$d; gitp ; done ; }
fgitb () {        soc; for d in `ls ..`; do echo -n "**** $d : "; cd ../$d; cbr  ; done ; }

# reset upstream: git branch mamobile_fields_ivr --set-upstream-to origin/develop
#                 git rebase upstream/master
# alias gitpm='   git pull   origin master'
# alias gitpd='   git pull   origin develop'
alias gitpusho='  git push   origin ' 

# Branch create/checkout/delete/force_delete: -D 
created2b () {    git checkout -b $1 origin/develop ; }
createm2b () {    git checkout -b $1 origin/master  ; }

alias co_reset='  git reset --hard; date; gitst '
reset_b () {      bORc=$1; git reset --hard  $bORc; git pull; date; gitst ; }

delete_b () {     bORc=$1; git branch -d     $bORc; date; gitst ; }

co_b () {         bORc=$1; bORc=${bORc:-master} && git checkout $bORc; date && echo ___NEW_PULL__&& git pull ; }
alias co_d='      co_b develop '
alias co_m='      co_b master '
alias co_h='      co_b henry  '

alias co_bx='     cdxt;    ech2 co_xt_boxerclient branch...; co_b boxerclient'
alias co_ma='     cdxtm;   ech2 co_xt_master  branch...;     co_m '

alias co_henry='  cdxa;    pwd;cbr;ech2 co_henry       branch...; co_b henry      '

# Refactor filenames: rm, mv; #git mv [file-ori] [file-renamed]
alias gitrm='     git rm --cached '

# List files # git ls-files --other --ignored --exclude-standard
alias gitlist='   git ls-files'

# Open github ogh
# all $gs= (pulls; commits; branches; releases; tags; compare; contributors; issues )
# branches/all; branches/yours; branches/active; tree/develop;  pull/3/files; pull/3/commits; pull/new/develop; compare/develop...csv_082316; 
oghh   () {                                         open https://github.comcast.com/xpcs/xap/tree/henry ; }
oghqlam () {                                        open https://github.com/hqlam/ ; } 

# Open ogh
ogh  () {                     rt=$1; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt ; }

ogc () {                      rt=$1; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/commits ; }
ogcp () {                     rt=$1; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/compare ; }
ogr  () {                     rt=$1; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/releases ; }
ogt  () {                     rt=$1; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/tags ; }
ogp  () {                     rt=$1; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/pulls ; }
ogb  () {                     rt=$1; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/branches ; }

# open ogh branches
oab () {                      rt=$1; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/branches/active ; }
oby () {                      rt=$1; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/branches/yours ; }

# open ogh tree
otb  () { b=$2;b=${b:-master};rt=$1; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/tree/$b ; }
otd  () {                     rt=$1; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/tree/develop ; }
otm  () {                     rt=$1; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/tree/master ; }

# open ogh pull
opr  () { pr=$1;              rt=$2; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/pull/$pr ; }
oprf () { pr=$1;              rt=$2; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/pull/$pr/files ; }
oprc () { pr=$1;              rt=$2; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/pull/$pr/commits ; }

# open ogh commit
ogcc  () { commit=$1;         rt=$2; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/commit/$commit?diff=split ; }

# open ogh compare
cpbran () { branch=$1;        rt=$2; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/compare/$branch  ; }
ogcp  () {                    rt=$1; rt=${rt:-xap}; open https://github.comcast.com/xpcs/$rt/compare/$2...$3 ; }

# xpc-test $              cat .git/config url = git@github.comcast.com:xpcs/xpc-test.git
#gcln () {                repo=$1;git clone git@github.comcast.com:xpcs/$repo ; } 
#alias clonexap='         cdco && gcln xap.git  '
#alias renewxap='         cdco && [[ -d xap ]]  && sudo mv -f xap   hl/xap_$(date '+%Y.%m.%d.%H.%M.%s')   && clonexap && cdxa && date; git branch -vv ; git log |head -7 '
gitcln () {               repo=$1; repo=${repo:-xpc-test}; git clone https://github.comcast.com/xpcs/$repo ; }

alias cdredis='           cd /app/redis/bin/     ; ls -ltr '
alias r-c='               /app/redis/bin/redis-cli '
alias status_serv='       service redis status '

##  Get JSON values of keys, subkeys

pjkey () {                python -c "import json,sys; print json.load(sys.stdin)$1 " ; }
#                         python -c "import json,sys;                      print json.load(sys.stdin)['payload'] "
#                         python -c "import json,sys;                        obj=json.load(sys.stdin);print obj['payload'] "
function getJsonVal2 () { python -c "import json,sys;sys.stdout.write(json.dumps(json.load(sys.stdin)$1, sort_keys=True, indent=4))"; }
function getJsonVal () {  python -c "import json,sys;sys.stdout.write(json.dumps(json.load(sys.stdin)$1))"; }

##  redis keys, value, subkeys 
getkey () {    redis-cli get $1 | python -m json.tool ; }
allk () {      redis-cli KEYS "*"  |sort ; }

##  Pull ERROR from log_stdout
IWE="INFO|WARN|ERROR"

### REDIS-CLI_COMMANDS

# redis-cli INFO | egrep "^db|connected|role|mem"
# redis-cli MONITOR
# redis-cli --version  
# redis-cli --stat   
# redis-cli --scan   
# redis-cli KEYS    map*; redis-cli KEYS rf*; redis-cli KEYS  "*" ; echo keys map*|redis-cli
# redis-cli DEL     testing_key
# redis-cli FLUSHALL           

# redis-cli TYPE    rfNoise_data:70:85:C6:33:9F:09
# redis-cli HLEN    rfNoise_data:70:85:C6:33:9F:09 
# redis-cli HKEYS   rfNoise_data:70:85:C6:33:9F:09 
# redis-cli HVALS   rfNoise_data:70:85:C6:33:9F:09 
# redis-cli HGETALL rfNoise_data:70:85:C6:33:9F:09 

# redis-cli HGET    rfNoise_data:70:85:C6:33:9F:09 counter
# redis-cli HMGET   rfNoise_data:70:85:C6:33:9F:09 counter cmtsValue
# redis-cli HEXISTS rfNoise_data:70:85:C6:33:9F:09 counter

# redis-cli CONFIG  GET    "*"
# redis-cli CLIENT  LIST
# redis-cli SLOWLOG RESET
# redis-cli SLOWLOG GET    25 
# redis-cli HMSET   myhash f1 HelloWorld f2 99 f3 -256
# redis-cli DBSIZE
# redis-cli BGSAVE
# redis-cli TIME   

alias oredishelp='   open http://redis.io/commands/hgetall'

# Monitor/Info redis keys:
alias redmo='        redis-cli          MONITOR   '
alias redif='        redis-cli          INFO      '

# cowsay -l;   for more pics
cowS () {      cowsay -f stegosaurus " DONE! $1 : `date` " ; }
cowT () {      cowsay -f turtle      " info: " ; }

gcw () {       tr -s ' ' '\n' | grep $1 $2 ; }
j122 () {      tr "\'"  "\"" ; }

headerx="Content-Type:application/xml"
headerj="Content-Type:application/json"

alias ojp='     open http://jsonpath.com/'
alias ojv='     open http://codebeautify.org/jsonviewer'
alias ojview='  open http://www.jsoneditoronline.org/'
alias timeu2e=' open http://www.epochconverter.com/'

#s_red=""
#s_com=""
#alias os_odp='  echo "U/P: admin/changeme" '
alias os_xredamb='echo "U/P: admin/changeme";    open http://96.119.99.46:8000/en-US/app/search/search?q=search%20index%3Dsmart_internet%205C8FE07EE442&display.page.search.mode=smart&earliest=-60m%40m&latest=now&sid=1492824317.4 '
#alias os_oredamb='echo "U/P: admin/changeme";   open http://96.118.29.46:8000/en-US/app/launcher/home'
alias os_oredamb=' echo "U/P: admin/changeme";   open http://96.118.29.46:8000/en-US/app/search/search'

alias os_='     echo "xpc_splunk XPC_$plunk123"; open https://splunk.ccp.cable.comcast.com/en-US/app/search/search '
alias os_ldap=' echo LDAP login;                 open https://splunk.ccp.cable.comcast.com/ '
alias splu_odp='open https://splunk.ccp.cable.comcast.com/en-US/app/search/odp_operational_metrics_dashboard?form.CLUSTER=green&form.HOST=green&form.SPAN=1h&earliest=0&latest= '

#henry_lam@cc.c /NT ID ; /cimdef ; /cust
alias oslack='  open https://cim.slack.com/'
alias oldap='   open https://github.comcast.com'
alias oop5='    open https://op5-os1.sys.comcast.net/monitor/index.php/auth/login?uri=tac%2Findex'

alias owebmail='open http://webmail.comcast.com'
# Outlook no mail: Cause1/ nw connection (CCemployee?); 2/ check credential (menu Tools>Accounts); 3/ WorkOffline (menu Tools); 4/ server running MS ExchangeServer is UNavailable (menu Tools>Accounts); 5/ req SSL? (menu Tools>Accounts>Adv>Server>Use SSL) 6/ req proxy server connect to MS ExcServer? (admin)

#cjb () {   b=$1; b={$1:-lastBuild}; curl -s http://ci2.csv.comcast.com/job/csv-smartconnect-x86_64-rel/$b ; }
#alias lastbconsole=' cjb lastBuild/consoleFull '
#alias gjb='          egrep "\(origin.*|Revision.*|NODE_ENV=|ERROR|error|Error:|Finished:|failing|failed|FAILURE$" '
#alias glastbconsole='cjb lastBuild/consoleFull | gjb '

# open apps
alias te='     open -a textedit '
alias opy='    open /Applications/PyCharm.app/ '
alias ofacet=' open /Applications/FaceTime.app/ '
alias ophoto=' open /Applications/Photos.app/ '
alias ocamera='open /Applications/Photo\ Booth.app/ '
alias oquickt='open /Applications/QuickTime\ Player.app/ '
alias oAVrec=' open /Applications/QuickTime\ Player.app/ '

### Jira filters:
# project      in ("Operational Data Platform", "xPC Platform", "Cross Platform Services") AND sprint = 17.3.2 AND assignee not in (ddicke001c, mabrah200, kpatel205, sthang001c, kshea200, jthuru200) AND Status not in (Resolved, Closed) ORDER BY assignee ASC
# project      in (ODP,XPC)
# sprint       = 17.3.2  ; in openSprints()
# status       in (Open, Reopened, Blocked, Closed, Resolved, "At Risk", "In Progress")
# assignee     = currentUser() 
# Priority     = P0
# reporter     in (vmiran200, aubale200, dsunde001c, hlam001c) 
# resolution   = Unresolved
# issuekey     in issueHistory() 
# reporter     = hlam001c   OR  assignee    = currentUser() ORDER BY Priority DESC
# text         ~ "Security"      ORDER BY createdDate DESC
# summary      ~ "Security"
# issuetype    != "Epic Story"

### JIRA       
ojtx () {      t=$1; t=${t:-3435}; echo "Browsing JIRA XPC ticket $t"; open https://ccp.sys.comcast.net/browse/XPC-$t ; }
ojto () {      t=$1; t=${t:-2380}; echo "Browsing JIRA ODP ticket $t"; open https://ccp.sys.comcast.net/browse/ODP-$t ; }
alias ojtf='   echo "Browsing JIRA filter $t";                  open https://ccp.sys.comcast.net/issues/?jql=  '

alias assnqa=' echo "assigned to QA to verify";   open https://ccp.sys.comcast.net/issues/?filter=74509'
# assignee in  (vmiran200, aubale200, dsunde001c, hlam001c, rsitar200) AND project in ("Operational Data Platform", "xPC Platform") ORDER BY createdDate DESC
alias cur4qa=' echo "available 4 qa to verify";   open https://ccp.sys.comcast.net/issues/?filter=74508'
# Status in    (Resolved) AND sprint in (openSprints()) AND project in ("Operational Data Platform", "xPC Platform") ORDER BY createdDate DESC
alias curPlate='open https://ccp.sys.comcast.net/issues/?filter=74507'
# reporter     = currentUser() OR assignee = currentUser() ORDER BY Priority DESC
alias curSpr=' open https://ccp.sys.comcast.net/secure/RapidBoard.jspa?rapidView=2846&selectedIssue=XPC-3480&quickFilter=12617'
 

# old alias    oji='open https://www.teamccp.com/jira/secure/Dashboard.jspa'
alias oji='    open https://ccp.sys.comcast.net/browse/XPC '
alias ojid='   open https://ccp.sys.comcast.net/secure/Dashboard.jspa '
alias ojira='  open http://jira.csv.comcast.com/secure/Dashboard.jspa '
ojiraci () {   open http://http://jira.csv.comcast.com/browse/CI-$1 ; }

### Confluence
alias oconflu='open https://www.teamccp.com/confluence/#all-updates'
alias osi='    open https://www.teamccp.com/confluence/display/SMARTINT'

# open web apps
alias obox='   open https://comcast.account.box.com/login'
alias odropbox='cddrop; open Screenshots'

alias osmb='   open smb://10.172.52.221/Share'

alias oje='    open https://jenkins.awsxpc.comcast.net'
alias ojenkin='open http://ci2.csv.comcast.com'

alias osys='   open $jxm;ojid; curPlate '
alias omai='   open http://mail.yahoo.com; open http://www.hotmail.com; open http://gmail.com '

### TEST_SPECIFIC 

csvLines () {      wc -l $* ; }
csvCommaCount () { csvf=$1; perl -ne 'print tr/,//, "\n"' < $csvf      | sort -u ; }
csvSumHorizon () { csvf=$1; perl -ne '@a=split(/,/);  $b=0; foreach $r (1..$#a){ $b+=$a[$r] } print "$a[0],$b\n"' -f $csvf ; }

c2j () {           csvf=$1; python $HOME/proj/py/csv2json/c2j.py $csvf ; echo "Go check $(basename $csvf).json file" ; }
csv2json () {      python -c "import csv,json;      print json.dumps(list(csv.reader(open('$1'))), sort_keys=True, indent=4, separators=(',', ': ') )" ; }

csvCol () {        python $HOME/proj/py/csvcolumn.py $1 ; }
csvFields () {     f=$1; col=$2; col=${col:-35}; r=$3; r=${r:-3}; for i in `seq $col`; do echo -ne "FIELD $i:  \t"; head -n $r $f |cut -d"," -f $i; done ; }
csvHdup () {       f=$1; head -1 $f | trUC|tr ',' '\n'|sort|uniq -d ; }      
csvView () {       f=$1; sed -e 's/,,/, ,/g' $f | column -s, -t | less -#5 -N -S ; }

### ALIAS_FOR_COMMON_USE

alias a='         alias'
alias clr='       printf "\033c"'
alias cp='        cp -i'

alias duh='       pwd; du -shc'
alias dush='      pwd; du -sh'
alias dusk='      pwd; du -sk'

alias speedtest=' python $HOME/Help/speedtest.py --share | cat09 '
alias sptlog='    python $HOME/Help/speedtest.py --share | ftee1 speedtest_$(hostname) '
spt () {          echo WIFI: ; cwf; system_profiler SPAirPortDataType |egrep -A10 'Current Network Information:'  ; ifconfig|gip ; line;t1;speedtest|egrep 'load:.*s$'; t2;line ; }
ospt () {         oterm "line;t1;speedtest|egrep 'load:.*s$'; t2;line; echo WIFI: ; cwf; system_profiler SPAirPortDataType |egrep -A10 'Current Network Information:' " ; }

alias gateway='   netstat -nr '
alias gm4='       egrep -i "[0-9a-z]{1,2}\:[0-9a-z]{1,2}\:[0-9a-z]{1,2}\:[0-9a-z]{1,2}\:[0-9a-z]{1,2}\:[0-9a-z]{1,2}" '
alias gmac:='     egrep -i "([0-9a-z]{0,4}\:){5,7}[0-9a-z]{0,4}" '
alias gmac='      egrep -i "[0-9a-z]{12}" '
alias gip='       egrep    "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" '
gii () {          p=$1; f=$2; if [ `egrep -co "$p" $f` -gt 0 ] ; then echo YES|grep YES; else echo Noooo|grep No; fi ; }
#conv|gip -o|a1line;echo

alias dnsgateway='cat /etc/sysconfig/network-scripts/ifcfg-eth0'
alias dnsip='     cat /etc/resolv.conf'
alias hostip='    cat /etc/hosts '
#dns1="69.252.80.80"
alias pingdns='   dnsip|grep nameserver|rights; pingf `dnsip|grep nameserver|tail -1|cuts -f2`|egrep -B5 "%.*"'

# Networksetup
# list HWport + DeviceName + EthernetAddress_MACAddr:  oterm networksetup -listallhardwareports; oterm networksetup -listallnetworkservices
# 1. an alias; 2. Automator: File>New>Service>nwu.workflow... Define a new service;  3.System Preferences > Keyboard > Shortcuts > Services 
alias nwu='    open         /System/Library/CoreServices/Applications/Network\ Utility.app/'
alias nwpref=' open         /System/Library/PreferencePanes/Network.prefPane/'
alias cwf='    networksetup -getairportnetwork  en0   | right: '
alias cnw='    cwf; system_profiler SPAirPortDataType | egrep -A10 "Current Network Information:" '
alias wifi='   networksetup -setairportpower    airport '
alias wificy=' wifi off;    wifi on;            nwpref '
alias wile='   networksetup -setairportnetwork  en0 ' # wile CCemployee

alias cpuinfo='lscpu'
alias crlf='   file `find ./` |grep CRLF '

alias mon='    ech2 "Monitor process status and jobs running ..."; ps -ef|egrep "webshare|python|tail"; jobs; date '
alias quepasa="ps auxwww"

left:  () {    egrep  ".*:" ; }
right: () {    egrep  ":.*" ; }
lefts  () {    egrep  ".*\s" ; }
rights () {    egrep  "\s.*" ; }
catl () {      cat $1 | left: ; }
catr () {      cat $1 | right: ; }

alias cut2c='  cut -d ":"  '
alias cut:='   cut -d ":"  '
alias cutc='   cut -d ","  '
alias cut,='   cut -d ","  '
alias cuts='   cut -d " "  '
alias cutdq='  cut -d "\""  '
alias cutb='   cut -d "#"  '
alias cutd='   cut -d "."  '
alias cutff='  cut -d "/"  '
alias cutp='   cut -d "|"  '
alias cutsc='  cut -d ";"  '

alias ducc='   cut -d"," -f'
alias duc='    cut -d" " -f'

apfield () {   awk               '{print $'$1'}'; }
fduc   () {    awk -v n=$1 -F"," '{print $n }'  ; }
fduc1 () {     awk               '{print $1 }'  ; }
alias lkh='    cat ~/.ssh/known_hosts | fduc1 '

alias d='      date '
alias df='     df -h'

alias e='      echo '
alias echob='  echo "*** echo BEGIN_at: `date` " '
alias echoe='  echo "*** echo END_at: `date` " '
#alias echod='  terminal-notifier -title "Terminal" -message "echo Done with task!" -open http://www.yahoo.com '

# pipe to color fonts
alias cred='   $HOME/proj/nodejs/colour.js --red '
alias cgreen=' $HOME/proj/nodejs/colour.js --green'
alias cblue='  $HOME/proj/nodejs/colour.js --blue'
alias cyellow='$HOME/proj/nodejs/colour.js --yellow'
alias camber=' $HOME/proj/nodejs/colour.js --amber'
alias cpink='  $HOME/proj/nodejs/colour.js --pink '
alias ccyan='  $HOME/proj/nodejs/colour.js --cyan '
alias cwhite=' $HOME/proj/nodejs/colour.js --white '
alias cblack=' $HOME/proj/nodejs/colour.js --black '

f2y () {       f=$1; mv $f $f.yaml; ls -ltra; pwd ; }
viy () {       f2y $1 ; vi $1.yaml ; }

alias catco='  egrep         -C1 [a-z]+ '
alias cat09='  egrep         -C1 [0-9]+ '
catln () {     fileName=$1 ;  sed -n "$2p" $fileName ; }
catn () {      f=$1; line=$2; cat -n $f|egrep -C10 $2 ; }

alias ge1='    sed -e 1,/ERROR/d |head '
fge1 () {      err=$2; err=${err:-ERROR}; grep -B2 $err  $1 |head -3 ; cat -n $1 | sed -e 1,/$err/d |head -n20 ; }

alias ldir='   ls -ltraF | egrep "^d" '
alias dir='    llr -F |egrep "^d" '
alias dirs='   find . -type d -d 1 -print0 | xargs -0 du -sc | sort -n '

alias l.='     ls -ld .* '
alias lR='     ls -Rh'
alias lh='     ls -tra | egrep "^\."'
alias lkh='    cat $HOME/.ssh/known_hosts | fduc '
alias ll='     ls -lhF'
alias llR='    ls -lRh'
alias lla='    ls -ltrahF'
alias lsr='    ls -trh'
alias llr='    ls -ltrh'
alias llrr='   ls -ltrhF|tail '
alias lls='    ls -sh '
alias llss='   ls -lShF '
alias llsd='   sudo find ./ -type d -exec du -sb {} \; | sort -g '
alias llt='    tree -L 1 '
alias tre1='   tree -L 1 '
alias tre2='   tree -L 2 '
alias lsp='    ls -p '

alias mv='     mv -i'
alias o='      open '
alias p='      pwd; tree -L 1 '

alias ping62=' ping6   -c2  '
alias pingf='  ping -a -c 2  '
alias ports='  netstat -tulan'

alias pscpu10='ps auxf | sort -nr -k 3 | head -10'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'

alias py='     python '
alias py27='   python2.7 '

alias repeatls='watch -t ls '

alias rm='     rm -i'
alias rmblank='sed "/^$/d;s/^[ \t]*//;s/[ \t]*$//" '
alias rmbline='sed "/^$/d" '

alias tree_='  find . -type d | ls -lARG'

alias tarextract=' tar   -xzf '
alias tarcompress='tar   -czf '
alias tarappend='  tar   -czfvr '
alias tarlist='    tar   -tzfv '
alias unziplist='  unzip -l '

ffnotexec () {  d=$1; d=${d:-.}; find $d -type f ! -perm -111 -ls ; }

# Find a file with a pattern in name:
function ff() { find . -type f -iname '*'"$*"'*' -ls ; }

alias u='       cd ..;ls; echo Current_dir is `pwd` '
alias cdu='     cd        ..;ls; echo Current_dir is `pwd` '
alias cdu2='    cd    ../..;ls; echo Current_dir is `pwd` '
alias cdu3='    cd ../../..;ls; echo Current_dir is `pwd` '

frep1 () {      while sleep 1;      do date;            $* ; echo ; done; }
frep () {       while sleep $1;     do date;  $2 $3 $4  $5 ; echo ; done; }
#loop150 () {   t1; for i in `seq 150`; do date; echo  $i:; $* ; echo ;            done; t2 ; } 
loop6 () {      t1; for i in `seq 6`;   do date; ech2 "Loop $i:"; bash -ic $* ; echo ; sleep 60;  done; t2 ; } 
loop () {       t1; for i in `seq 5`;   do date; ech2 "Loop $i:"; bash -ic $* ; echo ; sleep 5;   done; t2 ; } 

# use xargs cmd
alias xwc='     xargs wc -l'
alias xcat='    xargs cat'
alias xhead='   xargs head'
alias xllr='    xargs ls -ltra '

# loop files, loop dirs in a directoy
ffiles () {     n=0; for f in ./* ; do ((n++));ech2 $n; echo  "@ FILE: $f : "; $* $f; done ; }
fdirs ()  {     n=0; for d in ./* ; do pushd $d; pwd; $* ; popd; echo; done ; }

# NW dynamic IP
alias dynip='   curl -s http://checkip.dyndns.org | grep "\d*\d" '

##  grep dups
gdup () {       trLC|sort|uniq -d ; }

### USE_AWK_SED: http://sed.sourceforge.net/sed1line.txt
rmduplines () { cat $1 | awk '!NF || !seen[$0]++' ; }

awkfno () {     awk         -F"," '{print $'$1'}'; }
fmax   () {     awk -v n=$1 -F"," 'BEGIN {max = 0} {if ($n>max) max=$n} END {print max}' ; }
rmdup () {      awk '!($0 in array) { array[$0]; print }' ; }

alias rmblank='      sed "/^$/d;s/^[ \t]*//;s/[ \t]*$//" '
alias rmbline='      sed "/^$/d" '

a1line () {          tr '\n' ' '  ; }
alias anline='       perl -pe "s/,/\n/g" '

rmLeadingSpace () {  sed -e 's/^[ \t]*//' ; } 
rmTrailingSpace () { sed -e 's/[ \t]*$//' ; } 
rmSpace () {         sed -e 's/^[ \t]*// ; s/[ \t]*$//' ; } 
doubleSpace () {     sed G ; }
trippleSpace () {    sed 'G;G'; }
undodoubleSpace () { sed 'n;d' ; } 

## Back up
fbu  () {        cp -rfp $1 ./$(date '+%Y_%m_%d_%H_%M')_$1 ; ll|grep $1 ; }
fori () {        cp -rfp $1 $1.ori                         ; ll|grep $1 ; }

cpwithtar () {   src=$1; des=$2; cd $src ; tar cvf - ./* | (cd $des ; tar xvf - ) ; }


### USE_PYTHON
# print file extention: print '~/python/one-liners.py'.split('.')[-1]
# yum install -y facter
#/app/xap/conf/instance_config.py: import os; HOST_IP = os.popen('ifconfig eth0 | grep "inet\ addr" | cut -d: -f2 | cut -d" " -f1').read().strip()
insMod () {      ech2 "Install module $1"; mod=$1; mod=${mod:-ipaddr}; pip2.7 install $mod ; } 

# Testing a new py script: just enter to re-run script once
pystestloop () { pyscript=$*; while read ; do python $pyscript ; done ; }

# Testing ip
# def validate_ip(my_ip): p=my_ip.split(".") ; return len(p)==4 and all( 0<= int(i) < 256 for i in p)' 
pyisip () {      ip=$1; python -c 'import ipaddr,sys; print(ipaddr.ip_address(sys.argv[1]) ); ' ; }

titleUp () {     lo_title=$*;  python -c "print '$lo_title'.title()" ; }
week_number () { python -c 'import datetime; print(datetime.date.today().isocalendar()[1])' ; }

pyh ()   {       python -c "help( '$1' )" ; }
pyhq ()  {       echo q | pyh $1 ; }
pydoc () {       python -m pydoc $1 ; }
pyd ()   {       python -c "import $1;   print  dir($1)" ; }

pypath () {      python -c 'import sys, pprint; pprint.pprint(sys.path)' ; }
platf () {       python -c "from sys import platform; print platform " ; } 

### Parse json fields:

# given an json text
#>>> import json
#>>> x=json.loads("""{"msec":1.69403076171875,"error":"Not Found","data":{"data":null,"isBoom":true,"isServer":false,"output":{"statusCode":404,"payload":{"statusCode":404,"error":"Not Found"},"headers":{}},"message":"Not Found"}} """)
#>>> print x["data"]["isServer"]
#False

# given an API that returns json, parse fields like: a="http://96.118.57.11:8080/api/vi/version"
# {"status":200,"message":"OK","data":{"xpc":{"code_git_commit":"17.5.1-28.c2916a5","document_link":"https://comcast.box.com/s/4qwa5uh0ec200q1rz745jehaggd40225","build_time":"Tue May 16 18:59:00 2017 UTC"}}}
#>>> import urllib, json
#>>> a="http://96.118.57.11:8080/api/vi/version"
#>>> f=urllib.urlopen(a)
#>>> v=json.load(f)
#>>> f.close()
#>>> print v["status"]
#404


##  Convert
dates    () {    t=$1; echo $t " == " `date --date=@$1` ; }
dateu    () {    t=$1; echo $t " == " `date -d             "$t" +%s ` ; }
macdates () {    t=$1; echo $t " == " `date -r              $t `      ; }
macdateu () {    t=$1; echo $t " == " `date -jf "%Y-%m-%d" "$t" +%s ` ; }

h2d () {         echo $((0x$1)) ; }
d2h () {         printf '%x\n' $1 ; }
# WIP d2b () {         printf '%o\n' $1 ; }

trUC () {        tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'   ; }
trLC () {        tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'   ; }

fgbz ()  {       grep -i $1 $2 $3 $4  $HOME/Help/bash_rcFiles/bashrc.zbra ; }

lastjsli () {    name=$1; tail -1  `ls -1 -th $name* | head -1` | python -m json.tool ; }
lastfili () {    name=$1; tail -1  `ls -1 -th $name* | head -1` ; }

lastline () {    sed '$!d' $1 ; }
lastfile () {    ls -At $1* |head -1 ; } 

vilf () {        d=$1; d=${d:-.}; cd $d; lf=`lastfile`; ech2 "The last file: $lf"; vih $lf ; }

lastdropb () {   cd $HOME/Dropbox/Screenshots; lastfile          ; }
lastbox () {     cd $HOME/box_sync/;           lastfile          ; }

lastlog () {     cd $HOME/logs; ls -ltrh |tail -1 ; }
lastloghead () { cd $HOME/logs; ls -tr   |tail -1|xargs head -20 ; }
lastlogmore () { cd $HOME/logs; ls -tr   |tail -1|xargs more     ; }

ffg () {        fn=$1; pat=$2; sudo find ./ -name $fn -exec grep -iH $pat {} \; ; }

ftee  () {      tee -a $HOME/logs/$1_$(date '+%Y.%m.%d').log ; }
ftee1 () {      tee    $HOME/logs/$(date '+%Y.%m.%d_%H.%M')_$1.log ; }
ftee2 () {      tee    $HOME/logs/$(date '+%H.%M_%m%d%Y')_$1.yaml ; }
#for f in *; do [[ -f "$f" ]] && mv "$f" "$f.yaml"; done

fman () {       cmd=$1; man $cmd | col -b > $HOME/man_$1.txt; cat -n $HOME/man_$1.txt; ls -l $HOME/man_$1.txt  ; }

### clipboard: copy and paste
# pbcopy < file.txt; pbpaste; 
alias controlc='tee >(pbcopy)'
alias conc='    pbcopy'
alias conv='    echo `pbpaste` '

### USE_TERMINALS
hterm () {      colour=$1; cmd=$2; bash $HOME/proj/shell/hterm.sh $colour $cmd ; }

oterm () {      cmd=$*;   bash $HOME/proj/shell/oterm.sh "date;pwd;$cmd" ; } 
ftop   () {     osascript -e 'tell application "Terminal" to do script  "clear;echo hello; top " ' ; }


# launch port forwarding
pfw ()  {       hterm homebrew pfwd ; }

### MACBOOKPRO_TIPS 
# brew install coreutils; 
# get the file pathname: greadlink -f fname; 
alias smartdisk='diskutil info disk0  | egrep -C5 "SMART|Verified"  '
alias smartSSD='smartctl -a    disk0  | egrep -i  "fail|smart|pass" '
alias vcamera1='lsof  |head -1; lsof  | egrep -i  "AppleCamera|VDC" '
alias vcamera2='ps -ef|head -1; ps -ef| egrep -i  "AppleCamera|VDC" '
alias vcamera=' vcamera1'

alias w2h='     open https://goo.gl/maps/3mU5Nybps632'
alias w2noi='   open https://goo.gl/maps/EQKr9SM9RF72 '
alias w2dai='   open https://goo.gl/maps/CB8P52LSk8Q2 '
alias w2tem='   open https://goo.gl/maps/zPmk69q7NW82'

alias timesh='  echo hlam001c; open -a "Safari" http://budget.cable.comcast.com'
alias adp='     echo adphenrylam save34; open http://myAccess.adp.com'

alias e_v='     open https://goo.gl/kY9EoV '				
e2v  () {       open http://dictionary.cambridge.org/us/dictionary/english-vietnamese/$1 ; }
alias mdlink='  open https://www.mydlink.com/device#26298103'
alias kippbb='  open https://goo.gl/7BnUqU'

alias cccache=' echo chrome://settings/clearBrowserData'

alias godr='    open https://drive.google.com/drive/my-drive'


### Printers
PRT1="10.172.73.1"
PRT2="10.172.73.126"
PRTGREENLATERN="10.172.73.188"

### SI IP hosts

TFTP_IP="10.255.246.110"
XMGR="96.118.36.213"

hostG="96.115.78.175"
hostY="96.119.225.204"
hostA="96.118.23.51"  
hostR="96.118.57.11"

hostOY="96.118.58.243" 
hostOA="96.118.59.53"  
hostOR="96.118.61.32"

licR="96.118.57.11     96.118.57.13   96.118.27.110  96.118.30.93"
licA="96.119.227.212   96.119.227.195 96.119.245.37  96.119.243.238 96.118.23.51   96.118.30.94"
licY="96.119.225.204   96.119.228.79  96.118.16.114  96.118.165.225 96.118.185.219"
licX="96.118.57.11     96.118.57.13   96.118.27.110  96.118.30.93   96.119.227.212 96.119.227.195 96.119.245.37 96.119.243.238 96.118.23.51  96.118.30.94 96.119.225.204 96.119.228.79  96.118.16.114   96.118.165.225 96.118.185.219"

lic13R="96.118.57.10   96.118.57.12   96.118.27.107  96.118.27.106"
lic13A="96.119.227.189 96.119.227.222 96.119.245.35  96.119.243.237 96.118.23.53   96.118.23.52  "
lic13Y="96.119.225.205 96.119.224.255 96.118.16.113  96.118.16.111  96.118.165.224 96.118.172.88 "

licOR="96.118.61.32    96.118.61.37   96.118.27.90   96.118.16.126"
licOA="96.118.59.53    96.118.51.38   96.119.224.83  96.119.224.71  96.118.28.58   96.118.28.60"
licOY="96.118.58.243   96.118.59.240  96.119.228.102 96.118.167.133 96.118.190.181"
licO="96.118.61.32     96.118.61.37   96.118.27.90   96.118.16.126  96.118.59.53   96.118.51.38   96.119.224.83 96.119.224.71  96.118.28.58  96.118.28.60 96.118.58.243  96.118.59.240  96.119.228.102  96.118.167.133 96.118.190.181"

licGreen="96.115.78.175 96.115.78.176 96.115.78.21   96.114.241.135 96.114.241.127 96.114.22.211  68.87.23.10   68.87.23.100   68.87.23.101  96.114.34.109 96.114.34.110 96.114.34.142  96.114.35.226   96.114.35.227  " 
licG="96.115.78.175     68.87.23.10   "       

alias licr='cxi red    |gx24|gc2 ip|a1line; echo'
alias lica='cxi amber  |gx24|gc2 ip|a1line; echo'
alias licy='cxi yellow |gx24|gc2 ip|a1line; echo'
alias licx='echo "`licr`  `lica`  `licy` " '

alias licall='echo "`licx`"; echo $licO' 

GH="https://github.comcast.com"
GHX="https://github.comcast.com/xpcs"

CPRO_24="$HOME/devices/cpe/cpro_24.json"
CDEV_ec="$HOME/devices/cpe/cdev_ec.json"
CCIS_28="$HOME/devices/cpe/ccis_ec.json"
CXB6___="$HOME/devices/cpe/ccis_ec.json"

M1="10868CEA6D24"
M2="044E5A9AE8EC"
M3="F44B2A77BF28"
M6="F8A097EF091F"

M6A="F8A097EF0CDA"
MV="5C8FE07EE442"
MA="5c8fe07ede92"
MD="9c34263faa06"
# D1 dev dan1 9c34263faa06
# D2 dev dan1 9c34263f9adf
# P1 prod     5c8fe0aada6c
# V1 Vernon   5C8FE07EE442
# Amogh   CPE 5c8fe07ede92 10.255.244.58

CDEV_IP="10.255.244.34"
CCIS_IP="10.255.244.20"
I2="10.255.244.34"
I3="10.255.244.20"

alias minfo='  echo $M1 $M2 $M3'

alias m1if=' echo mac=$M1, ip=2001:0558:4000:001a:1286:8cff:feea:6d24, fwcpe=`wp_rdkb $M1|gc2 value`, UICloudPortal=internet.xfinity.com, UID=SI_XPC_UID65, UIPwd=Csv1050xPC  '
alias m2if=' echo mac=$M2, ip=$I2, fwcpe=`wp_rdkb $M2|gc2 value` ,         UICloudPortal=$I2,         UID=cusadmin, UIPwd=Xfinity '
alias m3if=' echo mac=$M3, ip=10.255.244.20 fwcpe=`wp_rdkb $M3|gc2 value`, UICloudPortal=internet.xfinity.com, UID=SI_XPC_UID24, UIPwd=Csv1050xPC  '
#alias m3info=' echo mac=$M3, ip=2001:0558:4000:001a:f64b:2aff:fe77:bf28 fwcpe=`wp_rdkb $M3|gc2 value`, UIlink=internet.xfinity.com, UID=SI_XPC_UID24, UIPwd=Csv1050xPC  '

### Local UI: u:p=cusadmin:Xfinity
alias lui_pro=' m1if; ech2 "Local UI: u:p=cusadmin:Xfinity";  open   https://internet.xfinity.com/'
alias lui_dev=' m2if; ech2 "Local UI: u:p=cusadmin:Xfinity";  open   http://$CDEV_IP'
alias lui_cis=' m3if; ech2 "Local UI: u:p=cusadmin:Xfinity";  open   http://[2001:0558:4000:001a:1286:8cff:feea:6d24] '
alias lui_stg=' echo    SI_XPC_UID65/Csv1050xPC/Mac=10868CEA6D24; echo SI_XPC_UID49/Csv1050xPC CMMAC=5C8FE0A62F62; open https://internet.staging.xfinity.com/'

### Portal: 1/General>App>NWModem: Modem device info; 2/General>App>POD: Pwd of the day for mso
iportal_POD="http://ip-edge-portal.cable.comcast.com/index.php"
alias oiportal=' open $iportal_POD '
alias modemIP='  echo "View cpro_24 device info at: General>Apps>NW modems and CM_MAC" ; open http://ip-edge-portal.cable.comcast.com/login.php'

# Go iportal to 1.get POD: navigate menu General > POD > vendor= ArrisWG, copy the POD
# Go iportal to 2.get info of modem/CPE, similar info get from Kevin's spreadsheet 
# enable telnet at local ui> Advanced > Remote Mgmt, must use u:p=mso/POD
lui_mso () {    cpeip=$1; echo "Browse CPE_IP: $cpeip, u:p= mso/POD "; open http://$cpeip ; }
alias lui_dev_mso='lui_mso $CDEV_IP'

# monitor CPE (or RDKB) traces by tail rdkb log /rdkb...
#trl () { ; }

### boxer
alias instboxer='cdbx  ; echo Python should be 2.7; python setup.py develop'

# Jenkins monitor jobs
alias jxm='     open https://jenkins.awsxpc.comcast.net/'

# Webex room
alias owebex='  open https://icollaborate.webex.com/meet/henry_lamcomcast.com'

# telnet to cpe pwd=arristi (or factory pwd from Kevin). Type quit: to shell; type "exit": back to console
alias telcdev='echo "pwd=arristi"; telnet 10.255.244.34'

# tail log WebPA: 1/ telnet to CPE_IP, pwd=arristi, type quit to enter cli; 2/ cdlr;tlwpa 
#alias llr='ls -ltraF';alias grep='grep --color ';alias cdlr='    cd            /rdklogs/logs/ && ls -ltra|tail'; alias tlr='     tail -n200 -f /rdklogs/logs/WEBPAlog.txt.0 '
alias tlwpa='   tail -n200 -f /rdklogs/logs/WEBPAlog.txt.0 '

# god command: show env, App (core) , Version { host ODP, IP, SHA = odpcore-ch2f-1d-yellow 96.119.228.111 17.3.1-58.8136fb2 }
god () {        ech2 "u:p=devops:onlydevops"; c=$1; c=${c:-red}; a=$2; a=${a:-core}; echo "color=$c, app=$a"; open http://repos.awsxpc.comcast.net/version/god_command_with_versions.py?color=$c\&app=$a ; }

### Non-xmanage: start magneto 051117
#odp, use :           http://repos.awsxpc.comcast.net/version/env_info.py?color=red
alias odpR='     open http://repos.awsxpc.comcast.net/version/env_info.py?color=red'
alias odpA='     open http://repos.awsxpc.comcast.net/version/env_info.py?color=amber'
alias odpY='     open http://repos.awsxpc.comcast.net/version/env_info.py?color=yellow'
alias odpG='     open http://repos.awsxpc.comcast.net/version/env_info.py?color=green'

#xpc, use magneto :   https://magneto.sys.comcast.net/xb_cloud/powercloud/tree/dev/hiera
alias omag='     open https://magneto.sys.comcast.net/xb_cloud/powercloud/tree/dev/hiera'
alias magR='     open https://magneto.sys.comcast.net/xb_cloud/powercloud/blob/dev/hiera/red.yaml'
alias magA='     open https://magneto.sys.comcast.net/xb_cloud/powercloud/blob/dev/hiera/amber.yaml'
alias magY='     open https://magneto.sys.comcast.net/xb_cloud/powercloud/blob/dev/hiera/yellow.yaml'
alias magG='     open https://magneto.sys.comcast.net/xb_cloud/powercloud/blob/dev/hiera/green.yaml'

#Muthu 051117:        https://magneto.sys.comcast.net/xb_cloud/powercloud OR _xap 
alias magpc='    open https://magneto.sys.comcast.net/xb_cloud/powercloud'
alias magxa='    open https://magneto.sys.comcast.net/xb_cloud/powercloudi_xap'


#checkenvhost: 1/env host (api curl get, api postman, pingf, dig, sshcor, runcor, tail logs, ps-ef, servive, supervisorctl); 2/celeRflower tasks; 3/cxi red nodee


### Xmanage shows servers ip, hostname xpccore*, or odpcore*, 24=N, 13=N-1, 
# alias_cxi_red='curl -s http://$hostR:9900/env'
cxi_ () {       c=$1; c=${c:-red} ; curl -s http://96.118.36.213:8000/api/v1/xmanage/env/list-new/$c | python -m json.tool ; }

# replace xmanage by magneto
cxi () {        c=$1; c=${c:-red} ; cat ~/devices/mag/$c.yaml ; } 

alias gxN='     gx        "core.*-[24]" '
alias gx24='    egrep -A1 "core.*-[24]" '
alias gx13='    egrep -A1 "core.*-[13]" '
alias gxredis=' egrep -A1  redis- '
alias gxsparkm='egrep -A1  sprkm- '
alias gxflower='egrep -A4 "xpccore.*-2d" '

gx () {         egrep -A1 "$*" ; }
#gx xpc/red/xpcproxy- 	4
#gx xpc/red/xpcconsul- 	6
#gx xpc/red/xpccore- 	8
#gx xpc/red/xpccworker-	8
#gx xpc/red/xpcdb- 	10
#gx xpc/red/xpcsync-    8
#gx xpc/red/xpcsprkm-   4
#gx xpc/red/xpcsprkw-   12
#gx xpc/red/xpchook- 	4
#gx xpc/red/xpcque- 	6
#gx xpc/red/xpczoo-     6
#gx xpc/red/xpcrabbit- 	6
#gx xpc/red/xpcredis- 	6
#gx xpc/red/xpclb-      4 	EQUIV $ dig red.awsxpc.comcast.net ; 
alias lbRAY='  dig red.awsxpc.comcast.net yellow.awsxpc.comcast.net yellow.awsxpc.comcast.net'
gRAY () {      egrep -i "red|amber|yellow" ; }

#nodee () { for x in proxy consul core db sync sprkm sprkw hook que zoo rabbit redis lb; do echo;echo $x; cxi $1 |grep xpc$x- ; done ; }

# Flower:5555 xpc core 2d $ cxi amber     | egrep -A5 "xpccore.*2d"
# Flower odp core 1d $ cxi odp-amber | egrep -A5 "odpcore.*1d"
#alias gxflowero='egrep -A4 "odpcore.*-1d" '

# ce_xflower yellow ; to get IP, of5 on dashboards and task, check for failed
of5 () {        i=$1; u:p=color:color; open http://$i:5555/tasks ; ech2 "verify celery flower tasks, search for FAILURE " ; }
ce_xflower () { e=$1; cxi $e | gxflowerx ; ech2 "@@@ get ip, run of5/tasks, search for FAILURE " ; }
ce_oflower () { e=$1; cxi $e | gxflowero ; ech2 "@@@ get ip, run of5/tasks, search for FAILURE " ; }

# celery flower: on red - asb - xpc: $echo "u:p= red/red"; open http://96.118.57.11:5555/tasks 
celeflowR () {  for i in $licR; do ech2 $i; open http://$i:5555/tasks; done ; }

# celery for Green 76.96.27.96:5555 or 76.96.26.193:5555
alias celeGflower='ech2                  ;  open http://76.96.27.96:5555/dashboard'
alias celeYflower='ech2 u:p=yellow:yellow;  open http://68.87.33.80:5555/dashboard'
alias celeAflower='ech2 u:p=amber:amber   ; open http://96.118.23.51:5555/dashboard'
alias celeRflower='ech2 u:p=red:red       ; open http://96.118.57.11:5555/dashboard'

# broad celery flower:5555 u:p=admin/xpcadmin OR admin/odpadmin
alias celeflower=' ech2 u:p=admin:xpcadmin; open http://68.87.33.80:5555/dashboard'
alias cfall='      celeRflower; celeAflower; celeYflower; celeflower '

# IP core hosts in low env
ipcore () {    echo red_list_core24_N:    ; cxi | egrep -A4 "core.*-[24]"|grep ip|cut -d: -f2|cat09 ; echo amber_list_core24_N: ; cxi amber | egrep -A4 "core.*-[24]"|grep ip|cut -d: -f2|camber; echo yellow_list_core24_N: ; cxi yellow | egrep -A4 "core.*-[24]"|grep ip|cut -d: -f2|camber  ; }

ipcN () {      c=$1; c=${c:-red}    ; echo core24_N_$c;   cxi $c | egrep -A4 "core.*-[24]"|grep ip|cut -d: -f2 ; }
ipc24 () {     c=$1; c=${c:-amber } ; echo core24_N_$c;   cxi $c | egrep -A4 "core.*-[24]"|grep ip|cut -d: -f2 ; }
ipc13 () {     c=$1; c=${c:-yellow} ; echo core13_N-1_$c; cxi $c | egrep -A4 "core.*-[13]"|grep ip|cut -d: -f2 ; }

ipcOR () {     echo red_ODPcore24_N:; cxi odp-red    | egrep -A4 "core.*-[24]"|grep ip|cut -d: -f2| tr ',\"' ' ' |cred  ; }
ipcOA () {     echo amb_ODPcore24_N:; cxi odp-amber  | egrep -A4 "core.*-[24]"|grep ip|cut -d: -f2| tr ',\"' ' ' |camber ; }
ipcOY () {     echo yel_ODPcore24_N:; cxi odp-yellow | egrep -A4 "core.*-[24]"|grep ip|cut -d: -f2| tr ',\"' ' ' |cyellow ; }

ipcR () {      echo red_xpccore24_N:; cxi        | egrep -A4 "core.*-[24]"|grep ip|cut -d: -f2| tr ',\"' ' ' |cat09 ; }
ipcA () {      echo amb_xpccore24_N:; cxi amber  | egrep -A4 "core.*-[24]"|grep ip|cut -d: -f2| tr ',\"' ' ' |camber ; }
ipcY () {      echo yel_xpccore24_N:; cxi yellow | egrep -A4 "core.*-[24]"|grep ip|cut -d: -f2| tr ',\"' ' ' |cyellow ; }

ipc () {       ipcR;  ipcA;  ipcY  ; } 
ipcO () {      ipcOR; ipcOA; ipcOY ; } 

ipr () {       c=$1; c=${c:-red } ; echo redis-: $c; cxi $c | egrep -A4 redis- |grep ip|cut -d: -f2| tr ',\"' ' ' |ccyan ; }

### Jenkins

# odpjenkins henrylam ci job: 
jeci="henrylam-ci-xap-96.118.53.221"
alias ohenrylamci='open https://odpjenkins.awsxpc.comcast.net/job/henrylam-ci-xap-96.118.53.221/'

# Jenkins job download 
jedlfw="download-rdkb-image"

# Jenkins job XB6
jexb6="smoketest-XB6-on-amber"

# Jenkins job
jeMon="https://jenkins.awsxpc.comcast.net/view/Monitor/job/"
nRedn="smoketest-n-on-red-n"
jxm="https://jenkins.awsxpc.comcast.net/view/Monitor/job/smoketest-n-1-on-red-n"
jeXPC="https://jenkins.awsxpc.comcast.net/"
jeODP="https://odpjenkins.awsxpc.comcast.net"

# jenkins job upgrade-rdkb to CPE: 0/fr Yocto ofw, scp 2Dan_2TFTP 
# 1/new fw TGxx, 2/CPE MAC+IP 3/jenkins job ofwup 4/check after 15mins   
jefwup="upgrade-rdkb"
alias ofwup='   open  https://jenkins.awsxpc.comcast.net/job/upgrade-rdkb/build?delay=0sec'
alias olistcpe='open  https://jenkins.awsxpc.comcast.net/view/list-cpe/'

# upgrade fw rdkb for Green/Production: use sitools
alias ofwupG='  echo use NTid to login; open https://sitools.sys.comcast.net/siweb/'
alias oistools='ofwupG'

# Dawg-house to retrieve CPE info
tmer () {      s=$1; s=${s:-480}; now; ech2 "START WAITING $s SECONDS ... "; sleep $s ; cowS $2 |cpink ; } 
odhm () {      m=$1; m=${m:-10868CEA6D24}; echo "1GO: link Open; 2MAC=$m right?; 3REBOOT: click Change Power State"; open http://dawg-house.cvs-a.ula.comcast.net:8080/dawg-house/webpa/?q=$m ; tmer 1200 Dawg_House_reboot; ech2 Check online; gowpa $m ; }
odhmac () {    m=$1; m=${m:-10868CEA6D24}; echo "1GO: link Open; 2MAC=$m right?; 3REBOOT: click Change Power State"; open http://dawg-house.cvs-a.ula.comcast.net:8080/dawg-house/webpa/?q=$m ; }
alias odh='    open http://dawg-house.cvs-a.ula.comcast.net:8080/dawg-house/webpa/'

sg_  () {      cm=$1; cm=${cm:-$CDEV_IP}; snmpget -v2c -c hDaFHJG7 $cm 1.3.6.1.2.1.1.1.0 | tr ';<<' '\n' | column -s: -t ; }
sg_rdkb () {   cm=$1; ech2 "RDKB at CPE MAC (using snmpget): $cm ";       sg_ $cm | egrep "SW_REV|_TG1682_" ; }
wp_rdkb () {   cm=$1; ech2 "RDKB at CPE MAC (thru WebPA/SATtoken): $cm "; py ~/get_fwcpe_thru_webpa.py $cm ; }

# check cpe IP (and others: )  thru WebPA/SATtoken
# UI_GW_SWImageName==Device..FirmwareName
# UI_ == Device..CloudUIEnable
#chk_cpe_CM_IP () { m=$1; m=${m:-$M2}; ech2 Chk if cpe $m has CM_IP; bash ~/checkouts/xpc-testm/xpc-test/xpcfunctionaltest/utilities/check_device_webpa.sh $m ; } 
gowpa () {     m=$1; m=${m:-$M2}; ech2 "Chk if cpe $m has CM_IP"; line; bash ~/checkouts/xpc-testm/xpc-test/xpcfunctionaltest/utilities/check_device_webpa.sh $m;ech2 ; } 

#xpc-test/xpcfunctionaltest/utilities/cleanup_cpe.py
cle () {       m=$1; ech2 "Clean CPE $m from envs"; python ~/checkouts/xpc-testm/xpc-test/xpcfunctionaltest/utilities/cleanup_cpe.py --cpe $m |cblue ; line ; }

# check if CPE mac is online thru webpa, and if onboard on any host/env
#olob () {      m=$1; ech2 "Check if online..."; gowpa $m|cblue; i=`py ~/get_ipcpe_thru_webpa.py $m |grep value | egrep -i "[a-f0-9:]+"`; ping -c 2 $i|cpink; ping6 -c 2 $i|cpink;ech2 "Check if onboard ..."; isAallm $m ; }
olob () {      m=$1; ech2 "Check if online thru WebPA ..."; gowpa $m|cblue; ech2 "Check if onboard ..."; isAallm $m ; }

### cd
alias sxa='    subl  ~/checkouts/xap'
alias sxt='    subl  ~/checkouts/xpc-test'

alias cdxa='   cd    ~/checkouts/xap'
ffx  () {      f=$1; find ./ -name *$f* ; }
ffxa () {      cdxa; ffx   $1 ; }
ffxt () {      cdxt; ffx   $1 ; }

alias cdst='   cd    ~/checkouts/xap/smoketests/; p '
alias cdsts='  cd    ~/checkouts/xap/smoketests/test_xpc/xpc_tests; p '
fgxt  () {     cdxt; egrep -rin "$*" * ; }
grin  () {     cdxt; egrep -rin "$*" * ; }

alias cdxt='   cd    ~/checkouts/xpc-test; cbr|ccyan; pwd|grep test '
alias cdxtm='  cd    ~/checkouts/xpc-testm/xpc-test; cbr|cgreen; pwd|grep test '

alias cdrunat='cd    ~/checkouts/xpc-test/boxertest_client; ech2 Current branch is `cbr|ccyan`; p '

#runl () {     cdrunat; c=$1; c=${c:-grass}; hterm $c "verN; verY; ping -c2 10.255.244.34; run_any.sh" ; }
runl () {      cdrunat; c=$1; c=${c:-basic}; hterm $c "now;echo $2;run_any.sh|ftee2 && cowS $2 |cgreen" ; }
alias run1='   runl           grass'
alias run2='   runl           pro '
alias run3='   runl           homebrew'
alias run4='   runl           ocean   '
alias run5='   runl           novel   '

# cd smoketest locations
alias cdsync=' cd   ~/checkouts/xap/smoketests/test_xpc/sync; p '
alias cdcele=' cd   ~/checkouts/xap/smoketests/test_xpc/test_case_celery_task; p '
alias cdnega=' cd   ~/checkouts/xap/smoketests/test_xpc/xpc_tests_negative; p '
alias cdxman=' cd   ~/checkouts/xap/smoketests/test_xpc/xmanage; p '           

alias cdsche=' cd   ~/checkouts/xap/smoketests/test_odp/v2/test_case_basic_scheduler; p '

# cdutil at xt master only
alias cdutil=' ech2 util only exists in branch master of xpc-testm/xpc-test repos; cd   ~/checkouts/xpc-testm/xpc-test/xpcfunctionaltest/utilities; p '

# bedtime and wake odp-2208
alias cdbw='   cd   ~/checkouts/xap/smoketests/test_odp/v2/;llt;cbr|cred; pwd|grep test '

# expected json data xpc-3480
alias cdsan='  cd   ~/checkouts/xap/smoketests/test_xpc/xpc_tests/sanity; pwd|grep test '
alias vicrd='  vis  ~/checkouts/xpc-test/boxertest_client/util/xpc_helpers.py compare_response_data'

# Create splunk chart in xpc dashboard xpc-3563


# SAMPLE TO RUN SMOKETEST: python smoketest.py --mac 5C8FE07ED532 --cpe_ip 10.255.244.69 --log INFO --host 96.119.227.212:8080 --scheme http  --webpa https://scytale-rc.webpa.comcast.net:8090   --suites test_suites/xpc_tests/test_case_sns_notification
alias obt='    open https://github.comcast.com/xpcs/xpc-test/tree/boxerclient/boxertest_client'

alias osts='   open https://github.comcast.com/xpcs/xap/tree/develop/smoketests/test_xpc/xpc_tests'
alias ost='    open https://github.comcast.com/xpcs/xap/tree/develop/smoketests'

alias oxa='    open https://github.comcast.com/xpcs/xap'
alias oxt='    open https://github.comcast.com/xpcs/xpc-test'

alias bapio='  open https://comcast.app.box.com/files/0/f/9067651730/1/f_76978037221'
alias bapix='  open https://comcast.app.box.com/files/0/f/9067651730/SprintN        '

alias cpro_acct='open https://customertimeline.cable.comcast.com/#/account/8155100181977186'
alias cpro='   pjson  ~/devices/cpe/cpro_24.json | right: '
alias cdev='   pjson  ~/devices/cpe/cdev_ec.json | right: '
alias ccis='   pjson  ~/devices/cpe/ccis_28.json | right: '
alias cxb6='   pjson  ~/devices/cpe/xb6.json     | left: '

alias macpro=' cpro | gc2 -i cmac'
alias macdev=' cdev | gc2 -i cmac'
alias maccis=' ccis | gc2 -i cmac'
alias macxb6=' cxb6 | gc2 -i cmac'

alias ippro='  cpro | grep IPv | egrep -i "[a-f0-9:]+" '
alias ipdev='  cdev | grep IPv | egrep -i "[a-f0-9:]+" '
alias ipcis='  ccis | grep IPv | egrep -i "[a-f0-9:]+" '
alias ipxb6='  cxb6 | grep IPv | egrep -i "[a-f0-9:]+" '

gc2 () {       egrep $*|cut -d: -f2|tr ',\"' ' ' ; }
gbx  () {      egrep -n "context|Starting|expect|status|method|-|endpoint|query|before|after"; }
gbx2 () {      egrep -n "action|request|response|context|Starting|expect|status|method|-|endpoint|query|before|after"; }
cgbx () {      tc=$1; cat $tc|gbx ; }

### check association and get csid:
delc () {      m=$1; h=$2; curl -s -X DELETE http://$h:8080/api/v1/gateway-cpe/$m               |pjson|cblue ; }
isa () {       m=$1; h=$2; curl -s -X GET    http://$h:8080/api/v1/gateway-cpe/$m/association   |pjson|cblue ; }

isA () {       m=$1; m=${m:-10868CEA6D24}; h=$2; h=${h:-96.119.227.212}; u="http://$h:8080/api/v1/gateway-cpe/$m/association"; echo The MAC $m association verified with URL $u; python -c "import sys,json,os,requests; resp = json.loads(requests.get('$u',cert='./client.pem',verify=False).text); print json.dumps(resp)" | python -m json.tool |cgreen ; }
isAc () {      m=$1; m=${m:-10868CEA6D24}; h=$2; h=${h:-96.119.227.212}; u="http://$h:8080/api/v1/gateway-cpe/$m/association"; echo The MAC $m association verified with URL $u; python -c "import sys,json,os,requests; resp = json.loads(requests.get('$u',cert='./client.pem',verify=False).text);  print json.dumps(resp)" if resp['status'] == 200 ; }

gcsid () {     isA $1 $2 | gc2 csid ; }

alias isAY='   isA $M1 $hostY'
alias isAA='   isA $M1 $hostA'
alias isAR='   isA $M1 $hostR'
alias isA1='   isAY; isAA; isAR '

alias isA2Y='  isA $M2 $hostY'
alias isA2A='  isA $M2 $hostA'
alias isA2R='  isA $M2 $hostR'
alias isA2='   isA2Y; isA2A; isA2R '

alias isA3Y='  isA $M3 $hostY'
alias isA3A='  isA $M3 $hostA'
alias isA3R='  isA $M3 $hostR'
alias isA3='   isA3Y; isA3A; isA3R '

isAallm () {   m=$1; for h in 96.118.57.11   96.118.57.13   96.118.27.110 96.118.30.93                96.119.227.195 96.119.245.37 96.119.243.238 96.118.23.51   96.118.30.94 96.119.225.204 96.119.228.79  96.118.16.114 96.118.165.225 96.118.185.219  ; do isA $m  $h; done ; }
isAm1 () {     isAallm $M1 ; }
isAm2 () {     isAallm $M2 ; }
isAm3 () {     isAallm $M3 ; }

# check if m1 or m2 being used, detect data in API asso
cm123 () {     nodata=`(isAm1 && isAm2 && isAm3) |grep -c data`; [ $nodata != 0 ] && ech2 `line` "uh-oh, [ALERT] M1/M2"|cred ; }

### create new empty csid
cr_csid () {   h=$1; h=${h:-96.119.227.212:8080}; u="http://$h/api/v1/gateway-configset"; echo "For host $h, creating CSID with  URL $u"; python -c "import sys,json,os,requests; resp= json.loads(requests.post('$u', cert='./client.pem', verify=False ).text) ; print json.dumps(resp, indent=4) " | python -m json.tool  ; }

### func a, b, c for Asso, onB, Clean
#alias check_asso='    py ~/chk_association.py '
alias cac='    py ~/clean_ac.py '
amh () {       m=$1; h=$2;       isA                         $m  $h    ; }
bmh () {       m=$1; h=$2;       py ~/onboard.py             $m  $h    |cblue ; }
dmh () {       m=$1; h=$2;       py ~/detach.py              $m  $h    ; }
cacmh () {     m=$1; h=$2;       py ~/clean_ac.py            $m  $h    ; }
cacmh0 () {    m=$1; h=$2;       py ~/clean_ac_emptycsid.py  $m  $h    ; }
swapmhc () {   m=$1; h=$2; c=$3; py ~/swap_onb.py            $m  $h $c |cblue ; }
pmh () {       m=$1; h=$2;       py ~/purge_cpe_frDB.py      $m  $h    ; }

### reminders
alias reminder_Mon_Yel='  echo reminder_Mon_Yellow'
alias reminder_Wed_Gre='  echo reminder_Wed_Green'
alias reminder_endSprint='echo "Check https://jenkins.awsxpc.comcast.net/view/red/job/smoketest-n-on-red* , or amber* , to find at least 1 job of N level, actually PASSED, before going to the next sprint" '

### firmware and tftp
xb6_str="TG3482"
xb3_arris_str="TG1682"
xb3_cisco_str="DPC3941"
#alias sshtftp='ssh root@10.255.246.110 '

### reboot, upgrade firmware/RDKB :
alias ofw='    open  https://nexus.teamccp.com/nexus/content/repositories/arris_xb3/images/signing_stage/ArrisXB3-Yocto-Release/'

# Dan's jumper host: lta27 aka 10.1.50.27 aka 69.252.255.146
alias sshDan=' ssh root@69.252.255.146 '
alias sshtftp='ssh root@69.252.255.146 -t "ssh 10.255.246.110" '

# [root@lta27 webpa-restart]# vim rdkb_auto_upgrade.py
alias viDanFwUpd='sshDan -t "vim      /root/webpa-restart/rdkb_auto_upgrade.py" '
alias lsDanFwUpd='sshDan -t "ls -ltra /root/webpa-restart/*.py" '

alias imgTFTP='sshDan -t "ssh 10.255.246.110 ls -ltr /var/www/html/images" '

### clduser
#alias sshcld='ssh clduser@96.118.61.26'
# ssh -i ~/.ssh/xpc-openstack-key.txt clduser@96.118.30.93 -t "date; hostname; sudo tail /var/log/yum.log"

# $ brew install csshx
# $ vi ~/.ssh/config; identityFile ~/.ssh/xpc-openstack-key.txt
# $ csshx --login clduser  96.119.227.248 96.119.227.25
sshc () {      csshx -l clduser  $* ; }
sshC () {      csshx -l root     $* ; }

### sshcore ,  run cmds on sshcore                
sshcor  () {   coreip=$1; coreip=${coreip:-96.118.57.11};  ssh -i ~/.ssh/xpc-openstack-key.txt    root@$coreip ; }
sshcore () {   coreip=$1; coreip=${coreip:-96.118.57.11};  ssh -i ~/.ssh/xpc-openstack-key.txt clduser@$coreip ; }
sshch () {     hterm basic "sshcor  $1" ; }

runcor  () {   coreip=$1; coreip=${coreip:-96.118.57.11};  ssh -i ~/.ssh/xpc-openstack-key.txt    root@$coreip -t "hostname; $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15" ; }
runcore () {   coreip=$1; coreip=${coreip:-96.118.57.11};  ssh -i ~/.ssh/xpc-openstack-key.txt clduser@$coreip -t " hostname && $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15" ; }

hncore () {    h=$1; h=${h:-96.118.57.11}; runcore $h "hostname" | cpink ; }
hnip () {      i=$1; e=`hncore $1|cut -d"-" -f4`; echo "$i $e" ; cxi $(e)|egrep -C2 $i ; }

alias lfw='    ls -ltra /var/www/html/images'

### cd at a xmanage env host
alias cdul='   cd      /app/logs/uwsgi;             ls -ltra; pwd '
alias cdal='   cd      /app/logs/api;               ls -ltra; pwd '
alias tlxpc='  tail -f /app/logs/api/xpc.log '
alias tluws='  tail -f /app/logs/uwsgi/uwsgi_xpc.log '

# WIP sudo tail /var/log/yum.log
# WIP tail -f   /app/logs/api/xpc.log|egrep --color -i  "mac=[a-z0-9]{12}|_sns_|smoketests|forget_device|authhint|path|duration|backup|restore|webpa.*timeout"
# WIP tail -f   /app/logs/uwsgi/uwsgi_xpc.log | egrep --color "sync|8888"
# WIP curl -s   "localhost:8080/api/v1/gateway-cpe/9C34266E38A6/configuration?group_id=group_wan_configuration"

# watch env hosts if service API is running
weh () {       i=$1; sec=$2; watch -n $sec -t "ssh root@$i -i ~/.ssh/xpc-openstack-key.txt supervisorctl status all ;date" ; }
alias wehR='   weh $hostR 900'
alias wehA='   weh $hostA 900'
alias wehY='   weh $hostY 900'

serviceA () {  e=$1; e=${e:-R}; for i in `seq 10`; do echo $i; serviceAR; now; line; sleep 900; done ; }
alias servAA=' serviceA A'

### Check services on env hosts
# check python web server status on env hosts: $ for i in $licR; do echo;echo $i; runcor $i service uwsgi status; done
# sudo service splunk status
# sudo service ntpd   status
# sudo service puppet status
# supervisorctl       status all   # services as: api, consul_agent, flower, xmagent, xmanage 
alias serviceUR='(for i in $licR; do echo;echo $i; runcor $i service uwsgi status;     done)|cred'

alias serviceAR='(for i in $licR; do echo;echo $i; runcor $i supervisorctl status all; done)|cred'
alias serviceAA='(for i in $licA; do echo;echo $i; runcor $i supervisorctl status all; done)|camber'
alias serviceAY='(for i in $licY; do echo;echo $i; runcor $i supervisorctl status all; done)|cyellow'

alias llcR='for i in $licR; do echo;echo $i; runcor $i ls -ltra /app/logs/api|tail; done'
# check last file of api/ logs:                $ for i in $licR; do echo;echo $i; runcor $i ls -ltra /app/logs/api|tail; done
# When API ver got err: 1/pingf $hostR; 2/dig it for DNS; 3/sshcor it for supervisorctl status api first, then uwsgi next; 4/check logs/api/*.log; 5/ps -ef some more...
tlu () {       h=$1; runcor $h tail -f /app/logs/api/uwsgi_xpc.log ; }
tlx () {       h=$1; runcor $h tail -f /app/logs/api/xpc.log ; }
tlh () {       h=$1; runcor $h tail -f /app/logs/api/$2.log ; }
tlhg () {      h=$1; runcor $h tail -f /app/logs/api/$2.log | grep -iE "error|fail" ; }

### SHA
# get the latest SHA, by API version
sha1 () {      rp=$1; rp=${rp:-xap}; echo "@ `date` : "|cblue; cd ~/checkouts/$rp; echo -n "The lastest $rp SHA of branch `cbr` is: "; git log -p -1 | egrep -o "commit [0-9a-f]{7}" |cut -c8-14 ; }

# get SHA,     by sshcore and check yum log info
coresha () {   coreip=$1; coreip=${coreip:-96.118.57.13}; ssh -i ~/.ssh/xpc-openstack-key.txt clduser@$coreip -t "echo `seq  -f = -s '' 20 `; date; hostname; sudo tail -4 /var/log/yum.log" ; }
csha () {      coreip=$1; coreip=${coreip:-96.118.57.13}; ssh -i ~/.ssh/xpc-openstack-key.txt clduser@$coreip -t "echo `seq  -f = -s '' 20 `; date; hostname; yum info xap      " ; }
alias shared=' for i in 57.11 57.13 27.110 30.93 ; do coresha 96.118.$i ; done '

# get the latest SHA  from github versus current on Red/A/Y hosts
g_c () {       cdxa; git pull 2> /dev/null; commit=$1; commit=${commit:-1}; gc=`git log -p -$commit | egrep -o "commit [0-9a-f]{7}" |cut -c8-14`; echo "GitHub xap repos: SHA=$gc"; echo; for i in $licR ; do echo -n red_core_$i: SHA=; cc=`curl -s $i:8080/api/v1/version|pjson|grep commit|tr ',\"' ' '|cut -d. -f4`; echo  $cc ; [ $gc != $cc ] && echo ">>>> NOT_matched `date` <<< " && echo ; done ; }
g_cA () {      cdxa;git pull 2> /dev/null;                                 gc=`git log -p -1       | egrep -o "commit [0-9a-f]{7}" |cut -c8-14`; echo "GitHub xap repos: SHA=$gc"; echo; for i in $licA ; do echo -n amb_core_$i: SHA=; cc=`curl -s $i:8080/api/v1/version|pjson|grep commit|tr ',\"' ' '|cut -d. -f4`; echo  $cc ; [ $gc != $cc ] && echo ">>>> NOT_matched `date` <<< " && echo ; done ; }
g_cY () {      cdxa;git pull 2> /dev/null;                                 gc=`git log -p -1       | egrep -o "commit [0-9a-f]{7}" |cut -c8-14`; echo "GitHub xap repos: SHA=$gc"; echo; for i in $licY ; do echo -n yel_core_$i: SHA=; cc=`curl -s $i:8080/api/v1/version|pjson|grep commit|tr ',\"' ' '|cut -d. -f4`; echo  $cc ; [ $gc != $cc ] && echo ">>>> NOT_matched `date` <<< " && echo ; done ; }

#g_c13 () {    cdxa; git pull 2> /dev/null; commit=$1; commit=${commit:-1}; gc=`git` log -p -$commit | egrep -o "commit [0-9a-f]{7}" |cut -c8-14`; echo "GitHub xap repos: SHA=$gc"; echo; for i in $lic13R ; do echo -n red13_core_$i: SHA=; cc=`curl -s $i:8080/api/v1/version|pjson|grep commit|tr ',\"' ' '|cut -d. -f4`; echo  $cc ; [ $gc != $cc ] && echo ">>>> NOT_matched `date` <<< " && echo ; done ; }

### get version SHA
# get ver Yellow or N-1: ask "version" API, using https to hit loadbalancer: https://yellow.awsxpc.comcast.net/api/v1/version

gverO () {     h=$1; curl -s -X GET http://$h:8080/api/v1/operational/version|pjson|gc2 commit ; }
gver () {      h=$1; curl -s -X GET http://$h:8080/api/v1/version|pjson|gc2 commit ; }

ver24R () {    for h in $licR ; do echo -n "red_core_$h: ";     gver $h ;       done ; }
ver24A () {    for h in $licA ; do echo -n "amb_core_$h: ";     gver $h ;       done ; }
ver24Y () {    for h in $licY ; do echo -n "yel_core_$h: ";     gver $h ;       done ; }

verOR () {     for h in $licOR; do echo -n "ODP_red_core_$h: "; gverO $h ;       done ; }
verOA () {     for h in $licOA; do echo -n "ODP_amb_core_$h: "; gverO $h ;       done ; }
verOY () {     for h in $licOY; do echo -n "ODP_yel_core_$h: "; gverO $h ;       done ; }

ver13R () {    for h in $lic13R;do echo -n "red13_core_$h: ";   gver $h ;       done ; }
ver13A () {    for h in $lic13A;do echo -n "amb13_core_$h: ";   gver $h ;       done ; }
ver13Y () {    for h in $lic13Y;do echo -n "yel13_core_$h: ";   gver $h ;       done ; }

verR () {      ver24R;  ver13R ; god red    core ; }
verA () {      ver24A;  ver13A ; god amber  core ; }
verY () {      ver24Y;  ver13Y ;                   }

# get ver N, N-1
verN () {      ver24R; verOR ; }
verN1 () {     verY;   verOY ; }
 
vern () {      gver    $hostR ; }
vern1() {      gver    $hostY ; }

# get current SHA at N, N-1
snn1 () {      sha1  xap | cpink; echo "Code level   N : `vern`"|cred; echo "Code level N-1 : `vern1`"|camber  ; }
#osnn1 () {    oterm snn1 ; }

# WIP alias apixpc='open https://red.awsxpc.comcast.net/docs'
#alias apixpc='open http://96.119.227.212:8080/docs/#!/v1'
#alias apiodp='open http://96.118.27.12/docs/#!/v1'
#oah () {      h=$1; open           http://$h:8080/docs ; }
#cah () {      h=$1; curl -s -X GET http://$h:8080/docs/api-docs/api/v1|pjson|grep path  ; }

### CPE configuration
isc () {      m=$1; h=$2; curl -s -X GET    http://$h:8080/api/v1/gateway-cpe/$m/configuration    |pjson|cblue ; }

### API
CSBU="/api/v1/gateway-configset"
CPEBU="/api/v1/gateway-cpe"
acs () {      m=$1; h=$2; curl -s -X GET    http://$h:8080$CSBU                      |pjson|cblue ; }
aws () {      m=$1; h=$2; curl -s -X GET    http://$h:8080$CPEBU/$m/webpa_stat       |pjson|cblue ; }
adc () {      m=$1; h=$2; curl -s -X GET    http://$h:8080$CPEBU/$m/device_class     |pjson|cblue ; }
agw () {      m=$1; h=$2; curl -s -X GET    http://$h:8080$CPEBU/$m/gateways         |pjson|cblue ; }
ain () {      m=$1; h=$2; curl -s -X GET    http://$h:8080$CPEBU/$m/initialization   |pjson|cblue ; }
asi () {      m=$1; h=$2; curl -s -X GET    http://$h:8080$CPEBU/$m/sync_info        |pjson|cblue ; }
awp () {      m=$1; h=$2; curl -s -X GET    http://$h:8080$CPEBU/$m/wifi_personalization      |pjson|cblue ; }
apf () {      m=$1; h=$2; curl -s -X GET    http://$h:8080$CPEBU/$m/post-factory-reset-action |pjson|cblue ; }

# traffic usage ... WIP
dtd () {      m=$1; h=$2; u="http://$h:8080/api/v1/operational/gateway-cpe/$m/devices/traffic_data?start_time=2017-03-31T16:57:47-07:00&end_time=2017-03-31T17:57:47-07:00&group=hour&delta=true&tz=PTZ" ; echo URL=$u; curl -s -X GET $u ; }

# check cpe is in bridge mode: https://api.webpa.comcast.net:8090/api/v2/device/mac:F8A097EF28AA/config?names=Device.X_CISCO_COM_DeviceControl.LanManagementEntry.1.LanMode

### curl commands: GET, POST, input=[ api_url json_data_file ]
curltime=" -w @$HOME/Help/curl-format2.txt"

cP () {       u="$1"; j=$2; ech2 $u; ech2 $j; curl -s -X POST $u -H "Content-Type: application/json"  -d $j | pjson | cblue ; }
# used this to reset value:false for XDNS: $ cP http://$hostR:8080/api/v1/internal/gateway-cpe/10868CEA6D24/tunnel @xvF.json
# file xvF.json: {"parameters":[ {"name":"Device.DeviceInfo.X_RDKCENTRAL-COM_EnableXDNS","value": "false", "dataType":3}]}
cPcsid () {   h=$1;   cG http://$h:8080/api/v1/gateway-configset/$2 ; }

cG () {       u="$1"; curl -s -X GET  $u | pjson | ccyan ; }
cGver () {    h=$1;   cG http://$h:8080/api/v1/version ; }
cGcpe () {    h=$1;   cG http://$h:8080/api/v1/gateway-cpe/$2 ; }
cGcsid () {   h=$1;   cG http://$h:8080/api/v1/gateway-configset/$2 ; }

### check smkt sync failed at 1_SparkMaster + 2_Hook + 3_Kafka + (assumed OK at 4_WebPA + 5_RDKB)
# sync at 1_Spark
s1_sparkm () { c=$1; c=${c:-red}; ech2 $c; cxi_ $c |grep -A4 sprkm-|egrep -ni "is_active|sprkm-|ip|ch2f|cmce|hob|asb" ; ech2 "Verify spark master sync... active true and false" ; ech2 "@@@ get ip ... to run ow8 next" ; }
ow8 () {      i=$1; open http://$i:8080 ; ech2 "verify spark master sync... state: S/B Running, and drill on app id" ; }

# sync at 2_Hook
hkWeb="/app/logs/hooks/webserver.log"
hkPrd="/app/logs/hooks/producer.log"
hkXpc="/app/logs/hooks/xpc.log"

#sshc $lsyR
#alias llr='ls -ltraF';alias grep='grep --color '; alias cdls=' cd /app/logs/api/; ls -ltraF|tail' ;alias tlsy=' tail -f /app/logs/api/xpc.log | grep -iE "044E5A9AE8EC" '
#gsy () { ; }
lsyR="96.118.57.14    96.118.57.15   96.118.57.16   96.118.57.17   96.118.27.240  96.118.27.245  96.118.27.246  96.118.30.92"
lsyA="96.119.226.201  96.119.227.230 96.119.226.202 96.119.227.233 96.119.243.41  96.119.243.42  96.118.23.64   96.118.23.65  96.118.23.61  96.118.31.1"
lsyY="96.119.231.173  96.119.231.173 96.119.224.61  96.119.228.8   96.118.166.129 96.118.166.129 96.118.166.130 96.118.172.89 96.118.185.22 96.118.18.203 96.118.18.204 96.118.18.205"

ssyR () {     csshx -l root $lsyR ; }
ssyA () {     csshx -l root $lsyA ; }
ssyY () {     csshx -l root $lsyY ; }

lhkR="96.118.57.20    96.118.57.21   96.118.27.122  96.118.27.121"
lhkA="96.119.227.248  96.119.227.25  96.119.245.72  96.119.245.82  96.118.23.67  96.118.23.68"
lhkY="96.119.226.171  96.119.226.176 96.118.167.88  96.118.167.89  96.118.16.136 96.118.16.137"

shkR () {     sshc $lhkR ; }
shkA () {     sshc $lhkA ; }
shkY () {     sshc $lhkY ; }

sshchk () {   lhk=$*; sshc $lhk ; }
s2_hk () {    e=$1; e=${e:-red}; cxi $e |  egrep -A1 xpchook ; }

alias cdhk='  cd      /app/logs/hooks'
alias thk='   cdhook; tail -f webserver.log  producer.log '

hosthk () {   cxi $1 |  egrep -A1 xpchook |  gc2 ip | tail -1 ; }
hktable () {  tr ' <>' '\n'| column -s= -t ; }

listhk () {   hh=$1;  ech2 $hh; runcore $hh ls -ltra /app/logs/hooks               \|tail ; }

gehkw () {    hh=$1;  ech2 $hh; runcore $hh grep -i error  /app/logs/hooks/webserver.log ; }
gehkp () {    hh=$1;  ech2 $hh; runcore $hh grep -i error  /app/logs/hooks/producer.log ; }

thkwp () {    hh=$1;  ech2 $hh; runcore $hh tail -f  $hkWeb $hkPrd ; }
alias vhkwp=' conv |  hktable '

ghk () {      egrep -i "webserver.log|producer.log|SYNC_NOTIFICATION|cid|cmc.*|mac|topic|hCPE_Events|error" ; }


# sync at 3_Kafka
alias hostkaf=' cxi | egrep -A1 xpcque '
alias hostzoo=' cxi | egrep -A1 xpczoo '
# WIP alias cdconsumer='cd   /app/logs/consumer'
# WIP alias cdxpclog='cd     /app/logs/xpclog'
#s3_Kafka (0 { ; }

# sync at 4_SparkWorker
alias hostsw='  cxi | egrep -A1 xpcsprkw'

# log into a xpcredis or odpredis- node; ls /app ; # see can see redis/, then $export PATH=$PATH:/app/redis/bin ; then /app/redis/bin/redis-cli keys "sat*" ; then $ /app/redis/bin/redis-cli get sat_token_yyyymm..

### find an odpcore node, sshcoreh in; run curl on api get resdis sat-token $curSat 
# $ ipc red; #get a core host; then $ curSat 96.118.57.11
# alternately, can get sat-token from sat-server, thru webpa api, line in script get_fwcpe_thru_webpa.py
curSat () {     eh=$1; runcore $eh  curl -s localhost:8080/api/v1/common/sat?source=current         \| python -m json.tool ; }
curSatVerb () { eh=$1; runcore $eh  curl -s localhost:8080/api/v1/common/sat?source=current&verbose \| python -m json.tool ; }

# local and redis should matched
curSatLoca () { eh=$1; runcore $eh  curl -s localhost:8080/api/v1/common/sat?source=local           \| python -m json.tool ; }
curSatRedi () { eh=$1; runcore $eh  curl -s localhost:8080/api/v1/common/sat?source=redis           \| python -m json.tool ; }

# Remedial step: re-create sat-token (if found that it is expired, not refreshed, or invalid) from source CodeBig2
remSat () {     eh=$1; runcore $eh  curl -s localhost:8080/api/v1/common/sat                        \| python -m json.tool ; }

# @core: cdredis-cli  /app/redis/bin/redis-cli
# $ ipr red ; #get a "redis-" host: ex: 96.118.25.55; then $ rcli 96.118.25.55 keys sat*; then $ rcli 96.118.25.55 get  sat_token_2     01704061800
rcli () {       rh=$1; c2=$2; c3=$3; c4=$4; c5=$5; c6=$6; runcore $rh /app/redis/bin/redis-cli $c1 $c2 $c3 $c4 $c5 $c6 ; }


# icingamonitor
alias imon='    ech2 "Username:icingaadmin, Password:powercloud"; open http://icingamonitor.awsxpc.comcast.net/icinga/ '

alias oautomqa='open https://www.teamccp.com/confluence/pages/viewpage.action?pageId=104106675'
alias obookxpc='open https://www.teamccp.com/confluence/pages/viewpage.action?pageId=167300441#xPCPlaybook(xFi)-XPCRunbook'
alias obook='   open /Users/hlam001c/Documents/si/api_docs/XPCRunbook_042717.docx'
alias oncall='  open https://www.teamccp.com/confluence/pages/viewpage.action?pageId=181703531'

# user pwd in clear text ODP-2371: verified with $licO and $licX, see all encrypted
#for o in $licO; do echo $o; runcore $hostOY egrep -i "user\|pass" /app/xap/conf/instance_config.py; done

### enable moca;                              ex: xpccore-ch2f-2d-yellow 96.119.225.204 MAC=5C8FE07EE122
en_moca () {   echo "enable moca: xpccore-ch2f-2d-yellow 96.119.225.204 MAC=5C8FE07EE122 " \
  curl --request POST \
  --url    'http://96.119.225.204:8080/api/v1/gateway-cpe/5C8FE07EE122/configuration?group_id=group_moca_mode_configuration' \
  --header 'cache-control: no-cache' \
  --header 'content-type: application/json' \
  --header 'postman-token: 7a115ddd-a099-381f-0aac-4965a1988b11' \
  --data   '{"moca_enabled" : true}' | pjson | cpink ; }

### set CPE level XDNS policy filter_level:1; ex: 96.118.61.32 odpcore-asb-2d-red, MAC=10868CEA6D24
filter_level_1 () {  echo "set CPE level XDNS policy filter_level:1: 96.118.61.32 odpcore-asb-2d-red, MAC=10868CEA6D24" \
  curl --request POST \
  --url    http://96.118.61.32:8080/api/v1/operational/gateway-cpe/10868CEA6D24/xdns_content_filtering \
  --header 'cache-control: no-cache' \
  --header 'content-type: application/json' \
  --header 'postman-token: 19f76f36-d05a-b68c-bf4d-c6a55a888414' \
  --data   '{"filter_level": 1}' | pjson | cpink ; }

### set Device level:                         ex: 96.118.51.38 odpcore-asb-4d-amber, MAC=10868CEA6D24
set_dev_lev () {    curl --request POST \
  --url    http://96.118.51.38:8080/api/v1/operational/gateway-cpe/10868CEA6D24/devices/xdns_content_filtering \
  --header 'cache-control: no-cache' \
  --header 'content-type: application/json' \
  --header 'postman-token: 2903837a-8818-b8c8-a3f8-175b9f7c6134' \
  --data   '{ "xdns_content_filtering_list": [{"device_mac": "dd00dd00dd00", "filter_level": 0}, {"device_mac": "dd11dd11dd11", "filter_level": 1}, {"device_mac": "dd22dd22dd22", "filter_level": 2}, {"device_mac": "dd33dd33dd33", "filter_level": 3}]}' | pjson | cpink ; }

### create csid:                              ex: 96.118.57.13 hostR MAC=F44B2A77BF28
create_csid () {   curl --request GET \
  --url    http://96.118.57.13:8080/api/v1/gateway-cpe/F44B2A77BF28/association \
  --header 'cache-control: no-cache' \
  --header 'postman-token: 770997cc-8dc0-33bf-c45d-3b751e278181' ; }

### greenpostman https://xpcapi-si.xpc.comcast.net/api/v1/gateway-configset/
#   greenpostman https://xpcapi-si.xpc.comcast.net/api/v1/gateway-configset/5CB066241153/configuration?group_id=group_private_wifi_configuration


#swagger UI hostR
#swagger UI hostR http://96.118.57.11:8080/docs/#!/v1
#swagger UI hostR http://96.118.57.11:8080/docs/#!/v1/Cscpe_Apply_Association_POST
#swagger UI hostR http://96.118.57.11:8080/docs/#!/v1/Cs_Create_Config_Set_POST
#http://96.118.57.11:8080/docs/#!/v1/Cs_Association_DELETE

### Day 1
# soft launch - UI - Cloud Portal / Production/ Green     https://internet.xfinity.com/
# soft launch - UI - Cloud Portal / Staging   / Yellow    https://internet.staging.xfinity.com/
# xpc$odp current sprint        https://ccp.sys.comcast.net/secure/RapidBoard.jspa?rapidView=2846&view=detail&selectedIssue=ODP-1804&quickFilter=11536
# xpc platform JIRA             https://ccp.sys.comcast.net/browse/XPC/?selectedTab=com.atlassian.jira.jira-projects-plugin:issues-panel
# oper Data Plat                https://ccp.sys.comcast.net/browse/ODP/?selectedTab=com.atlassian.jira.jira-projects-plugin:issues-panel
# XBCLOUD JIRA                  https://ccp.sys.comcast.net/browse/XBC/?selectedTab=com.atlassian.jira.jira-projects-plugin:summary-panel
# oconf ; xFi Platform ; One Stop Page ; QA Cheat Sheet ; xfinity power cloud ; jxm 
# updated status: https://ccp.sys.comcast.net/browse/XPC
# updated status: https://ccp.sys.comcast.net/browse/ODP

# run with $M2 and cdev_ip, test N on Red N-1, ex: https://jenkins.awsxpc.comcast.net/view/Monitor/job/smoketest-n-on-red-n-1/60817/consoleFull
# hlam001c@cacsvlo-16686:~/checkouts/xpc-test/boxertest_client$ /usr/bin/python2.7 smoketest-xpc.py --log INFO --scheme https --host red.awsxpc.comcast.net --webpa https://api.webpa.comcast.net:8090 --mac 044E5A9AE8EC --cpe_ip 10.255.244.34  --suites xpc_tests/sanity

### DB Cassandra

#cqlsh 96.118.54.192 -u cassandra -p cassandra --ssl; cassandra@cqlsh> use odp;
#cqlsh               -u cassandra -p cassandra --ssl  $(hostname -i)
#[root@odpdb-asb-10d-yellow ~]# cqlsh --ssl -u cassandra -p c@ss@n6R@ $(facter ipaddress)
#[root@odpdb-asb-10d-yellow ~]# cqlsh -u odpuser2 -p Y3LLeNV --ssl $(hostname -i) -e "select * from odp.device_management_celery_tasks           where cpe_mac = '3C7A8A3762DA' and device_mac = '11111D8CA420' " > nullData_3C7A8A3762DA_3C7A8A3762DA.txt
#[root@odpdb-asb-10d-yellow ~]# cqlsh -u odpuser2 -p Y3LLeNV --ssl $(hostname -i) -e "select * from odp.device_management_config                 limit 10"
#[root@odpdb-asb-10d-yellow ~]# cqlsh -u odpuser2 -p Y3LLeNV --ssl $(hostname -i) -e "select * from odp.device_management                        limit 10" 
#[root@odpdb-asb-10d-yellow ~]# cqlsh -u odpuser2 -p Y3LLeNV --ssl $(hostname -i) -e "select * from odp.device_management_gateway_schedules      limit 10"
#[root@odpdb-asb-10d-yellow ~]# cqlsh -u odpuser2 -p Y3LLeNV --ssl $(hostname -i) -e "select * from odp.device_management_cloud_schedules_config limit 10" 

# Vernon QUORUM/Nanda 051217
# set config:      /app/xap/conf/instance_config.py
# default set ODP: /app/xap/src/settings/odp_settings.py
# default set XPC: /app/xap/src/settings/xpc_settings.py

